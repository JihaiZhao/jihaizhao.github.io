---
layout: default
modal-id: 8
title: Implementing SLAM from Scratch
short-caption: EKF SLAM
date: 2024-3-1
img: SLAM.gif
youtube: https://youtu.be/oW_I_jkgkAg
alt: image-alt
project-date: 2024-3-1
category: Extended Kalman Filter, SLAM, Simulation, C++
github: https://github.com/ME495-Navigation/slam-project-JihaiZhao
# description: <h4><strong>Video Demo</strong></h4><iframe width="700" height="450" src="https://www.youtube.com/embed/oW_I_jkgkAg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p style="text-align:left;">This project consists of several ROS packages</p><h4>turtlelib Library</h4><p style="text-align:left;">A library for handling transformations in SE(2) and other turtlebot-related math which include</p><ul><li><p style="text-align:left;">geometry2d - Handles 2D geometry primitives.</p></li><li><p style="text-align:left;">se2d - Handles 2D rigid body transformations.</p></li><li><p style="text-align:left;">frame_main - Performs some rigid body computations based on user input.</p></li><li><p style="text-align:left;">diff_drive - Includes all functions related to the kinematics of wheeled mobile robots.</p></li></ul><h4>nuturtle_description</h4><p style="text-align:left;">URDF files for Nuturtle turtlebot3_burger. Able to display multiple turtlebot3 models in rviz, each appearing with a different color. Also be able to change the physical properties of the robot by editing a yaml file.</p><img class="img-responsive" src="img/SLAM/nusim2.png" alt='Nuturtle Description' /><h4>nusim</h4><p  style="text-align:left;">Create the basic environment for the robot. Allow the robot to move, according to simulated kinematics, but through the same publisher/subscriber interface that an actual turtlebot uses.</p><h4>nuslam</h4><h4 style="text-align:left;">EKF SLAM</h4><p style="text-align:left;">The primary component of this project is the implementation of feature-based extended Kalman filter simultaneous localization and mapping (<a href='https://www.cs.unc.edu/~welch/media/pdf/kalman_intro.pdf'>EKF-SLAM</a>). The EKF-SLAM algorithm consisted of three steps<span>:</span> initialization, prediction, and update. At each timestep, odometry and sensor measurements were used to estimate the state of the robot and landmarks. The prediction step updated the estimate of the full state vector and propagated uncertainty using the linearized state transition model. The update step involved computing the theoretical measurement given the current state estimate, the Kalman gain, the posterior state update, and the posterior covariance.</p><br><h4 style="text-align:left;">Landmark Detection</h4><p style="text-align:left;">To detect cylindrical landmarks, the landmarks node reads LIDAR data and divides the data into clusters, and then performs supervised (circular regression) learning on each of the clusters to determine which of the clusters should be counted as landmarks. </p><img class="img-responsive" src="img/SLAM/landmark.png" alt='Land Mark Detection' />
---
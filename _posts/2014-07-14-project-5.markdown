---
layout: default
modal-id: 5
title: RRT
short-caption: RRT
date: 2023-9-1
img: RRT_N.gif
alt: image-alt
project-date: 2023-9-1
category: Path Planning
github: https://github.com/JihaiZhao/RRT
description: <br><p>A Rapidly-Exploring Random Tree (RRT) is a fundamental path planning algorithm in robotics. Path planning is the task of moving a robot from one location to another, while avoiding obstacles and satisfying constraints. An RRT consists of a set of vertices, which represent configurations in some domain D and edges, which connect two vertices. The algorithm randomly builds a tree in such a way that, as the number of vertices n increases to ∞, the vertices are uniformly distributed across the domain D⊂Rn.</p><br><h4><strong>Task 1<span>:</span> Simple RRT</strong></h4><p>Implement an RRT in a two-dimensional domain, D=[0,100]×[0,100]. Use an initial configuration of qinit=(50,50) and Δ=1. Plot the result for a few different values of K</p><img class="img-responsive" src="img/RRT/task1.png" alt="profile-pic" /><br><h4><strong>Task 2<span>:</span> Planning a Path with Obstacles</strong></h4><p>Compare to task 1 there are three modifications to make:Created 35 circle obstacles with random radius and random position to the domain. Collision Checking. Once find a path from a node in the tree to the goal state, I can traverse the tree backwards to the starting location to find the path</p><img class="img-responsive" src="img/RRT/task2.png" alt="profile-pic" /><br><h4><strong>Task 3<span>:</span> RRT with Arbitrary Objects</strong></h4><p>Now let's consider arbitrary objects, represented by black pixels in a binary image. I will load a binary image into script, and randomly choose starting and goal locations, and then plan a path.</p><img class="img-responsive" src="img/RRT/task3.png" alt="profile-pic" /></br></br></br></br>
---

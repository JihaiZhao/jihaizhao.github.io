---
layout: default
modal-id: 8
title: 3D-Bin-Packing
short-caption: 3D-Bin-Packing
date: 2024-3-1
img: packing.gif
alt: image-alt
project-date: 2024-3-1
category: Computer Vision, Manipulation, NP-hard
github: https://github.com/JihaiZhao/RRT
description: <p style="text-align:left;">This project uses the Franka Emika Panda arm to solve a 3D bin packing problem which is an optimization challenge that involves efficiently packing a set of items of different sizes into a container, while minimizing wasted space and maximizing space utilization. It uses computer vision to detect the dimension and location of the object needed to be packed, and it uses Moveit2 to plan the trajectories.</p><br><h4><strong>Video Demo</strong></h4><iframe width="700" height="450" src="https://www.youtube.com/embed/YN1Lk3Jp5u0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><br><h4><strong>Object Detection</strong></h4><p style="text-align:left;"> </p>Detecting the dimension of the object and finding the precise location of the project are the keys in this project. A realsense D435 is mounted on the robot. The object was detected and tracked using the RGB camera data and depth data provided by the Intel RealSense camera. All potential objects are a red color, and their location is determined using color masking in OpenCV to isolate the red pixels in the camera’s view. A contour was drawn around the red area, and the centroid of the contour and four more points on the edges were found. Then the grasp position and orientation of the object were found. </br>The object will be placed on the “bin” and the robot will move to the observe position first. Once the camera detects an object appears, the robot will move to the top of the object to make sure the object is at the center of the camera to better detect the dimension of the object. <img class="img-responsive" src="img/PACKING/1.png" alt="profile-pic" /><br><h4><strong>Grasping</strong></h4><p style="text-align:left;">Compare to task 1 there are three modifications to make:Created 35 circle obstacles with random radius and random position to the domain. Collision Checking. Once find a path from a node in the tree to the goal state, I can traverse the tree backwards to the starting location to find the path</p><img class="img-responsive" src="img/RRT/task2.png" alt="profile-pic" /><br><h4><strong>Task 3<span>:</span> RRT with Arbitrary Objects</strong></h4><p style="text-align:left;">Now let's consider arbitrary objects, represented by black pixels in a binary image. I will load a binary image into script, and randomly choose starting and goal locations, and then plan a path.</p><img class="img-responsive" src="img/RRT/task3.png" alt="profile-pic" /></br></br></br></br>
---